# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
- master

pool:
  vmImage: 'ubuntu-1604'

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

steps:
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    shopt -s dotglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'

- script: |
    go version
    go get -v -t -d ./...
    if [ -f Gopkg.toml ]; then
        curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
        dep ensure
    fi
    CGO_ENABLED=0 GOARCH=amd64 GOOS=darwin go build -o beihangLogin.darwin.amd64 .
    CGO_ENABLED=0 GOARCH=amd64 GOOS=freebsd go build -o beihangLogin.freebsd.amd64 .
    CGO_ENABLED=0 GOARCH=386 GOOS=freebsd go build -o beihangLogin.freebsd.386 .
    CGO_ENABLED=0 GOARCH=amd64 GOOS=linux go build -o beihangLogin.linux.amd64 .
    CGO_ENABLED=0 GOARCH=386 GOOS=linux go build -o beihangLogin.linux.386 .
    CGO_ENABLED=0 GOARCH=arm GOOS=linux go build -o beihangLogin.linux.arm .
    CGO_ENABLED=0 GOARCH=arm64 GOOS=linux go build -o beihangLogin.linux.arm64 .
    CGO_ENABLED=0 GOARCH=mips GOOS=linux go build -o beihangLogin.linux.mips .
    CGO_ENABLED=0 GOARCH=mips64 GOOS=linux go build -o beihangLogin.linux.mips64 .
    CGO_ENABLED=0 GOARCH=mips64le GOOS=linux go build -o beihangLogin.linux.mips64le .
    CGO_ENABLED=0 GOARCH=mipsle GOOS=linux go build -o beihangLogin.linux.mipsle .
    CGO_ENABLED=0 GOARCH=amd64 GOOS=windows go build -o beihangLogin.windows.amd64 .
    CGO_ENABLED=0 GOARCH=386 GOOS=windows go build -o beihangLogin.windows.386 .
  workingDirectory: '$(modulePath)'
  displayName: 'Get dependencies, then build'
